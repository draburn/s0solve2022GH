numFigs = 0;
%
vizTime0 = time();
msg( __FILE__, __LINE__, "Drawing graphs..." );
doVsTheta = false;
%
%
numFigs++; figure(numFigs);
n = 1;
cellAry_legend(1,n) = { curveDat(n).strName };
plot( ...
  curveDat(n).matX(1,:), curveDat(n).matX(2,:), ...
  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
  'linewidth', curveDat(n).plot_lineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_markerSize );
hold on;
for n=2:numCurves
	cellAry_legend(1,n) = { curveDat(n).strName };
	plot( ...
	  curveDat(n).matX(1,:), curveDat(n).matX(2,:), ...
	  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
	  'linewidth', curveDat(n).plot_lineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_markerSize );
end
legObj = legend( cellAry_legend, "location", "northwestoutside" );
set( legObj, 'Interpreter', 'none' );
for n=1:numCurves
	plot( ...
	  curveDat(n).matX(1,[1,end]), curveDat(n).matX(2,[1,end]), ...
	  curveDat(n).plot_markerStyle, ...
	  'linewidth', curveDat(n).plot_bigLineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_bigMarkerSize );
end
hold off;
title( "Legend" );
grid on;
%
%
%
numFigs++; figure(numFigs);
funchVizLog = @(x)(log( eps025*max(max(x)) + x - min(min(x)) ));
contourf( x1Mesh, x2Mesh, funchVizLog(omegaMesh), contourPlot_numLevels );
colormap( mycmap(contourPlot_numColors) );
xlabel( "x1" );
ylabel( "x2" );
title( "log(omega-omegaMin) vs x1, x2" );
if ( contourPlot_axEq )
	axis equal;
end
hold on;
for n=1:numCurves
	plot( ...
	  curveDat(n).matX(1,:), curveDat(n).matX(2,:), ...
	  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
	  'linewidth', curveDat(n).plot_lineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_markerSize );
	plot( ...
	  curveDat(n).matX(1,[1,end]), curveDat(n).matX(2,[1,end]), ...
	  curveDat(n).plot_markerStyle, ...
	  'linewidth', curveDat(n).plot_bigLineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_bigMarkerSize );
end
if ( doVsTheta )
	plot( vt_matX(1,:), vt_matX(2,:), 'r-', 'linewidth', 3, 'markersize', 10 );
	plot( vt_vecXF_off(1), vt_vecXF_off(2), 'k+', 'linewidth', 3, 'markersize', 20 );
	plot( vt_vecXF_off(1), vt_vecXF_off(2), 'ko', 'linewidth', 3, 'markersize', 20 );
	plot( vt_vecXF_on(1),  vt_vecXF_on(2),  'kx', 'linewidth', 3, 'markersize', 20 );
	plot( vt_vecXF_on(1),  vt_vecXF_on(2),  'ks', 'linewidth', 3, 'markersize', 20 );
	plot( [ vt_vecXC(1),    vt_vecXF_off(1) ], [ vt_vecXC(2),    vt_vecXF_off(2) ], 'r-' );
	plot( [ vt_vecXC(1),    vt_vecXF_on(1)  ], [ vt_vecXC(2),    vt_vecXF_on(2)  ], 'r-' );
	plot( [ vt_vecXF_on(1), vt_vecXF_off(1) ], [ vt_vecXF_on(2), vt_vecXF_off(2) ], 'r-' );
end
hold off;
grid on;
%
%
%
if (0)
%title( "sqrt(omega) vs Step index" );
numFigs++; figure(numFigs);
n = 1;
loglog( ...
  (1:curveDat(n).numPts), sqrt(curveDat(n).vecOmega), ...
  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
  'linewidth', curveDat(n).plot_lineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_markerSize );
hold on;
loglog( ...
  [ 1, curveDat(n).numPts ], sqrt(curveDat(n).vecOmega([1,end])), ...
  curveDat(n).plot_markerStyle, ...
  'linewidth', curveDat(n).plot_bigLineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_bigMarkerSize );
for n=2:numCurves
	if ( 1 == curveDat(n).numPts )
		continue;
	end
	loglog( ...
	  (1:curveDat(n).numPts), sqrt(curveDat(n).vecOmega), ...
	  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
	  'linewidth', curveDat(n).plot_lineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_markerSize );
	loglog( ...
	  [ 1, curveDat(n).numPts ], sqrt(curveDat(n).vecOmega([1,end])), ...
	  curveDat(n).plot_markerStyle, ...
	  'linewidth', curveDat(n).plot_bigLineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_bigMarkerSize );
end
hold off;
xlabel( "Step index" )
ylabel( "sqrt(omega)" );
title( "sqrt(omega) vs Step index" );
grid on;
end
%
%
%
if (1)
%title( "sqrt(omega) vs Distance from vecX0" );
numFigs++; figure(numFigs);
n = 1;
plot( ...
  curveDat(n).vecDist, sqrt(curveDat(n).vecOmega), ...
  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
  'linewidth', curveDat(n).plot_lineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_markerSize );
hold on;
plot( ...
  curveDat(n).vecDist([1,end]), sqrt(curveDat(n).vecOmega([1,end])), ...
  curveDat(n).plot_markerStyle, ...
  'linewidth', curveDat(n).plot_bigLineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_bigMarkerSize );
for n=2:numCurves
	plot( ...
	  curveDat(n).vecDist, sqrt(curveDat(n).vecOmega), ...
	  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
	  'linewidth', curveDat(n).plot_lineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_markerSize );
	plot( ...
	  curveDat(n).vecDist([1,end]), sqrt(curveDat(n).vecOmega([1,end])), ...
	  curveDat(n).plot_markerStyle, ...
	  'linewidth', curveDat(n).plot_bigLineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_bigMarkerSize );
end
hold off;
xlabel( "Distance from vecX0" )
ylabel( "sqrt(omega)" );
title( "sqrt(omega) vs Distance from vecX0" );
grid on;
end
%
%
%
if (0)
%title( "Distance from vecX0 vs Step index" );
numFigs++; figure(numFigs);
n = 1;
semilogx( ...
  (1:curveDat(n).numPts), curveDat(n).vecDist, ...
  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
  'linewidth', curveDat(n).plot_lineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_markerSize );
hold on;
semilogx( ...
  [ 1, curveDat(n).numPts ], curveDat(n).vecDist([1,end]), ...
  curveDat(n).plot_markerStyle, ...
  'linewidth', curveDat(n).plot_bigLineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_bigMarkerSize );
for n=2:numCurves
	semilogx( ...
	  (1:curveDat(n).numPts), curveDat(n).vecDist, ...
	  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
	  'linewidth', curveDat(n).plot_lineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_markerSize );
	semilogx( ...
	  [ 1, curveDat(n).numPts ], curveDat(n).vecDist([1,end]), ...
	  curveDat(n).plot_markerStyle, ...
	  'linewidth', curveDat(n).plot_bigLineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_bigMarkerSize );
end
hold off;
xlabel( "Step index" )
ylabel( "Distance from vecX0" );
title( "Distance from vecX0 vs Step index" );
grid on;
end
%
%
%
if (0)
%title( "Distance from final pt vs Step index" );
numFigs++; figure(numFigs);
n = 1;
semilogx( ...
  (1:curveDat(n).numPts-1), curveDat(n).vecDist_fromEnd(1:end-1), ...
  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
  'linewidth', curveDat(n).plot_lineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_markerSize );
hold on;
semilogx( ...
  [ 1, curveDat(n).numPts-1 ], curveDat(n).vecDist_fromEnd([1,end-1]), ...
  curveDat(n).plot_markerStyle, ...
  'linewidth', curveDat(n).plot_bigLineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_bigMarkerSize );
for n=2:numCurves
	if ( 1 == curveDat(n).numPts )
		continue;
	end
	semilogx( ...
	  (1:curveDat(n).numPts-1), curveDat(n).vecDist_fromEnd(1:end-1), ...
	  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
	  'linewidth', curveDat(n).plot_lineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_markerSize );
	semilogx( ...
	  [ 1, curveDat(n).numPts-1 ], curveDat(n).vecDist_fromEnd([1,end-1]), ...
	  curveDat(n).plot_markerStyle, ...
	  'linewidth', curveDat(n).plot_bigLineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_bigMarkerSize );
end
hold off;
xlabel( "Step index" )
ylabel( "Distance from final pt" );
title( "Distance from final pt vs Step index" );
grid on;
end
%
%
%
if (1)
%title( "Step size vs Step index" );
numFigs++; figure(numFigs);
n = 1;
loglog( ...
  (1:curveDat(n).numPts-1), curveDat(n).vecStepSize_cent, ...
  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
  'linewidth', curveDat(n).plot_lineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_markerSize );
hold on;
loglog( ...
  [ 1, curveDat(n).numPts-1 ], curveDat(n).vecStepSize_cent([1,end]), ...
  curveDat(n).plot_markerStyle, ...
  'linewidth', curveDat(n).plot_bigLineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_bigMarkerSize );
for n=2:numCurves
	if ( 1 == curveDat(n).numPts )
		continue;
	end
	loglog( ...
	  (1:curveDat(n).numPts-1), curveDat(n).vecStepSize_cent, ...
	  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
	  'linewidth', curveDat(n).plot_lineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_markerSize );
	loglog( ...
	  [ 1, curveDat(n).numPts-1 ], curveDat(n).vecStepSize_cent([1,end]), ...
	  curveDat(n).plot_markerStyle, ...
	  'linewidth', curveDat(n).plot_bigLineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_bigMarkerSize );
end
hold off;
xlabel( "Step index" )
ylabel( "Step size" );
title( "Step size vs Step index" );
grid on;
end
%
%
if ( doVsTheta )
	%
	if (0)
		numFigs++; figure(numFigs);
		plot( vt_thetaVals, vt_matX(1,:), 'o-' );
		hold on;
		plot( vt_thetaF, vt_vecXF(1), 'kx', 'linewidth', 2, 'markersize', 15 );
		plot( vt_thetaF, vt_vecXF(1), 'ks', 'linewidth', 2, 'markersize', 15 );
		hold off;
		xlabel( "theta" );
		ylabel( "x1" );
		title( "x1 vs theta" );
		grid on;
		%
		numFigs++; figure(numFigs);
		plot( vt_thetaVals, vt_matX(2,:), 'o-' );
		hold on;
		plot( vt_thetaF, vt_vecXF(2), 'kx', 'linewidth', 2, 'markersize', 15 );
		plot( vt_thetaF, vt_vecXF(2), 'ks', 'linewidth', 2, 'markersize', 15 );
		hold off;
		xlabel( "theta" );
		ylabel( "x2" );
		title( "x2 vs theta" );
		grid on;
	end
	%
	%
	if (1)
		numFigs++; figure(numFigs);
		plot( vt_thetaVals, vt_vecOmega, 'o-' );
		hold on;
		plot( vt_thetaF, funchOmega(vt_vecXF), 'kx', 'linewidth', 2, 'markersize', 15 );
		plot( vt_thetaF, funchOmega(vt_vecXF), 'ks', 'linewidth', 2, 'markersize', 15 );
		hold off;
		xlabel( "theta" );
		ylabel( "omega" );
		title( "omega vs theta" );
		grid on;
	end
	%
	%
	if (1)
		numFigs++; figure(numFigs);
		plot( vt_thetaVals, vt_vecDTG, 'o-' );
		hold on;
		plot( vt_thetaF, vt_dtgF, 'kx', 'linewidth', 2, 'markersize', 15 );
		plot( vt_thetaF, vt_dtgF, 'ks', 'linewidth', 2, 'markersize', 15 );
		hold off;
		xlabel( "theta" );
		ylabel( "d^T g" );
		title( "d^T g vs theta" );
		grid on;
	end
	%
	%
	if (1)
		numFigs++; figure(numFigs);
		plot( vt_thetaVals, sqrt(sum(vt_matG.^2,1)), 'o-' );
		hold on;
		plot( vt_thetaF, sqrt(sum(vt_vecGF.^2,1)), 'kx', 'linewidth', 2, 'markersize', 15 );
		plot( vt_thetaF, sqrt(sum(vt_vecGF.^2,1)), 'ks', 'linewidth', 2, 'markersize', 15 );
		hold off;
		xlabel( "theta" );
		ylabel( "||g||" );
		title( "||g|| vs theta" );
		grid on;
	end
	%
	%
	if (0)
		numFigs++; figure(numFigs);
		semilogy( vt_thetaVals, sqrt(sum(vt_matGS.^2,1)), 'o-' );
		hold on;
		semilogy( vt_thetaF, sqrt(sum(vt_vecGSF.^2,1)), 'kx', 'linewidth', 2, 'markersize', 15 );
		semilogy( vt_thetaF, sqrt(sum(vt_vecGSF.^2,1)), 'ks', 'linewidth', 2, 'markersize', 15 );
		hold off;
		xlabel( "theta" );
		ylabel( "||g_S||" );
		title( "||g_S|| vs theta" );
		grid on;
	end
end
%
%
%
if (1)
%title( "log(omegaModel-omegaModelMin) vs x1, x2" );
numFigs++; figure(numFigs);
funchVizLog = @(x)(log( eps025*max(max(x)) + x - min(min(x)) ));
contourf( x1Mesh, x2Mesh, funchVizLog(omegaModelMesh), contourPlot_numLevels );
colormap( mycmap(contourPlot_numColors) );
xlabel( "x1" );
ylabel( "x2" );
title( "log(omegaModel-omegaModelMin) vs x1, x2" );
if ( contourPlot_axEq )
	axis equal;
end
hold on;
for n=1:numCurves
	plot( ...
	  curveDat(n).matX(1,:), curveDat(n).matX(2,:), ...
	  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
	  'linewidth', curveDat(n).plot_lineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_markerSize );
	plot( ...
	  curveDat(n).matX(1,[1,end]), curveDat(n).matX(2,[1,end]), ...
	  curveDat(n).plot_markerStyle, ...
	  'linewidth', curveDat(n).plot_bigLineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_bigMarkerSize );
end
if ( doVsTheta )
	plot( vt_matX(1,:), vt_matX(2,:), 'r-', 'linewidth', 3, 'markersize', 10 );
	plot( vt_vecXF_off(1), vt_vecXF_off(2), 'k+', 'linewidth', 3, 'markersize', 20 );
	plot( vt_vecXF_off(1), vt_vecXF_off(2), 'ko', 'linewidth', 3, 'markersize', 20 );
	plot( vt_vecXF_on(1),  vt_vecXF_on(2),  'kx', 'linewidth', 3, 'markersize', 20 );
	plot( vt_vecXF_on(1),  vt_vecXF_on(2),  'ks', 'linewidth', 3, 'markersize', 20 );
	plot( [ vt_vecXC(1),    vt_vecXF_off(1) ], [ vt_vecXC(2),    vt_vecXF_off(2) ], 'r-' );
	plot( [ vt_vecXC(1),    vt_vecXF_on(1)  ], [ vt_vecXC(2),    vt_vecXF_on(2)  ], 'r-' );
	plot( [ vt_vecXF_on(1), vt_vecXF_off(1) ], [ vt_vecXF_on(2), vt_vecXF_off(2) ], 'r-' );
end
hold off;
grid on;
end
%
%
%
if (1)
%title( "sqrt(omegaModel) vs Distance from vecX0" );
funcY = @(y) y; str_funcY = "";
%funcY = @(y) sqrt(y); str_funcY="sqrt";
numFigs++; figure(numFigs);
n = 1;
plot( ...
  curveDat(n).vecDist, funcY(curveDat(n).vecOmegaModel), ...
  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
  'linewidth', curveDat(n).plot_lineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_markerSize );
hold on;
plot( ...
  curveDat(n).vecDist([1,end]), funcY(curveDat(n).vecOmegaModel([1,end])), ...
  curveDat(n).plot_markerStyle, ...
  'linewidth', curveDat(n).plot_bigLineWidth, ...
  'color', curveDat(n).plot_color, ...
  'markersize', curveDat(n).plot_bigMarkerSize );
for n=2:numCurves
	plot( ...
	  curveDat(n).vecDist, funcY(curveDat(n).vecOmegaModel), ...
	  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
	  'linewidth', curveDat(n).plot_lineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_markerSize );
	plot( ...
	  curveDat(n).vecDist([1,end]), funcY(curveDat(n).vecOmegaModel([1,end])), ...
	  curveDat(n).plot_markerStyle, ...
	  'linewidth', curveDat(n).plot_bigLineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_bigMarkerSize );
end
hold off;
xlabel( "Distance from vecX0" )
ylabel( [ str_funcY "(omegaModel)" ] );
title( [ str_funcY "(omegaModel) vs Distance from vecX0" ] );
grid on;
end
%
%
%
if (1)
numFigs++; figure(numFigs);
funchVizLog = @(x)(log( eps025*max(max(x)) + x - min(min(x)) ));
contourf( x1Mesh, x2Mesh, funchVizLog(omegaFOCQMesh), contourPlot_numLevels );
colormap( mycmap(contourPlot_numColors) );
xlabel( "x1" );
ylabel( "x2" );
title( "log(omegaFOCQ-omegaFOCQMin) vs x1, x2" );
if ( contourPlot_axEq )
	axis equal;
end
hold on;
for n=1:numCurves
	plot( ...
	  curveDat(n).matX(1,:), curveDat(n).matX(2,:), ...
	  [ curveDat(n).plot_markerStyle, curveDat(n).plot_lineStyle], ...
	  'linewidth', curveDat(n).plot_lineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_markerSize );
	plot( ...
	  curveDat(n).matX(1,[1,end]), curveDat(n).matX(2,[1,end]), ...
	  curveDat(n).plot_markerStyle, ...
	  'linewidth', curveDat(n).plot_bigLineWidth, ...
	  'color', curveDat(n).plot_color, ...
	  'markersize', curveDat(n).plot_bigMarkerSize );
end
if ( doVsTheta )
	plot( vt_matX(1,:), vt_matX(2,:), 'r-', 'linewidth', 3, 'markersize', 10 );
	plot( vt_vecXF_off(1), vt_vecXF_off(2), 'k+', 'linewidth', 3, 'markersize', 20 );
	plot( vt_vecXF_off(1), vt_vecXF_off(2), 'ko', 'linewidth', 3, 'markersize', 20 );
	plot( vt_vecXF_on(1),  vt_vecXF_on(2),  'kx', 'linewidth', 3, 'markersize', 20 );
	plot( vt_vecXF_on(1),  vt_vecXF_on(2),  'ks', 'linewidth', 3, 'markersize', 20 );
	plot( [ vt_vecXC(1),    vt_vecXF_off(1) ], [ vt_vecXC(2),    vt_vecXF_off(2) ], 'r-' );
	plot( [ vt_vecXC(1),    vt_vecXF_on(1)  ], [ vt_vecXC(2),    vt_vecXF_on(2)  ], 'r-' );
	plot( [ vt_vecXF_on(1), vt_vecXF_off(1) ], [ vt_vecXF_on(2), vt_vecXF_off(2) ], 'r-' );
end
hold off;
grid on;
end
%
%
msg( __FILE__, __LINE__, sprintf( "Drawing graphs took %0.3fs.", time()-vizTime0 ) );
